{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>CSR Proxy is a simple service to sign the clients' CSR via the ACME server.</p> <p>The self-signed certificates are no longer sufficient, posing challenges in distributing trial and evaluation versions of software with web interfaces. To address this, software publishers typically consider the following options:</p> <ol> <li> <p>Delegate Certificate Signing to the User:</p> <ul> <li>Pros: Gives control to advanced users.</li> <li>Cons: Requires user knowledge of PKI, complex infrastructure, or additional expenses.</li> </ul> </li> <li> <p>Generate Self-Signed Certificate with mkcert:</p> <ul> <li>Pros: Suitable for developers.</li> <li>Cons: Compromises system security, demands browser reloading, and adds complexity.</li> </ul> </li> <li> <p>Order a Certificate from Global CA:</p> <ul> <li>Pros: Secure, but expensive.</li> <li>Cons: Violates TLS security principles by exposing the private key.</li> </ul> </li> <li> <p>Use <code>localhost.direct</code> Certificate or Similar Services:</p> <ul> <li>Pros: Similar to the previous approach.</li> <li>Cons: Public exposure of the public key.</li> </ul> </li> <li> <p>Order Separate Certificates for Each User:</p> <ul> <li>Pros: Secure but time-consuming and costly.</li> <li>Cons: Mutual trust issue; the publisher generates and knows the client's private key.</li> </ul> </li> <li> <p>Generate Client's Key and Certificate via ACME Server:</p> <ul> <li>Pros: Less expensive.</li> <li>Cons: Mutual trust issue persists; the publisher generates and knows the client's private key.</li> </ul> </li> <li> <p>Negotiate with ACME Server from Client's Site:</p> <ul> <li>Pros: Reliable, but requires additional infrastructure setup.</li> <li>Cons: Suitable for advanced users, not the default choice.</li> </ul> </li> </ol> <p>Considering the need for mutual trust and simplicity in software evaluation,  the publisher should generate a private certificate on the user's side without touching it. The published also needs to maintain all necessary infrastructure for the certificate signing. Enter the CSR Proxy.</p>"},{"location":"#csr-proxy-overview","title":"CSR Proxy Overview","text":"<p>The CSR Proxy is a straightforward service executed on the publisher's side. It:</p> <ul> <li>Receives the Certificate Signing Request (CSR) from the client.</li> <li>Proxies the CSR to the ACME server for signing.</li> <li>Handles ACME challenge fulfillment, shielding the end user from complexity.</li> </ul> <p>The sequence diagram is shown below. The primal parties are:</p> <ul> <li> <p>Client: An entity demanding the certificate signing.</p> </li> <li> <p>CSR Proxy: The certificate signing service, consists of two parts:</p> <ul> <li>API: The client-facing API, performing ACME interaction on behalf of the client. Also performs DNS provisioning.</li> <li>DNS: PowerDNS service, providing a provisioning interface to API and serving DNS requests.</li> </ul> </li> <li> <p>ACME: Any RFC-8555 compatible ACME server, like Let's Encrypt.</p> </li> </ul> <pre><code>sequenceDiagram\n    participant Client\n    box CSR Proxy\n    participant API\n    participant DNS\n    end\n    participant ACME\n    Client-&gt;&gt;Client: Generate private RSA key\n    Client-&gt;&gt;Client: Create CSR\n    Client-&gt;&gt;API: CSR sign request\n    activate API\n    API-&gt;&gt;ACME: New order\n    activate ACME\n    ACME-&gt;&gt;API: Order authorization\n    deactivate ACME\n    API-&gt;&gt;ACME: Get challenges\n    activate ACME\n    ACME-&gt;&gt;API: Challenges\n    deactivate ACME\n    API-&gt;&gt;DNS: Put _acme-challenges RR\n    activate DNS\n    DNS-&gt;&gt;API: RR is ready\n    deactivate DNS\n    API-&gt;&gt;ACME: Respond dns-01 challenge\n    activate ACME\n    ACME-&gt;&gt;API: Status\n    ACME-&gt;&gt;DNS: Query _acme-challenge RR\n    activate DNS\n    DNS-&gt;&gt;ACME: _acme-challenge RR\n    deactivate DNS\n    API-&gt;&gt;ACME: Check autorization\n    ACME-&gt;&gt;API: Authorization status\n    API-&gt;&gt;ACME: Finalize\n    ACME-&gt;&gt;API: Order status    \n    deactivate ACME\n    API-&gt;&gt;Client: Signed certificate\n    deactivate API    </code></pre>"},{"location":"#on-gufo-stack","title":"On Gufo Stack","text":"<p>This product is a part of Gufo Stack - the collaborative effort  led by Gufo Labs. Our goal is to create a robust and flexible  set of tools to create network management software and automate  routine administration tasks.</p> <p>To do this, we extract the key technologies that have proven themselves  in the NOC and bring them as separate packages. Then we work on API, performance tuning, documentation, and testing. The NOC uses the final result as the external dependencies.</p> <p>Gufo Stack makes the NOC better, and this is our primary task. But other products can benefit from Gufo Stack too. So we believe that our effort will make  the other network management products better.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>To see unreleased changes, please see the CHANGELOG on the master branch guide.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li><code>--trace-format</code> option.</li> <li>Python 3.13 support.</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Python 3.8 support.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>uvicorn 0.36.0</li> <li>starlette 0.48.0</li> </ul>"},{"location":"CHANGELOG/#security","title":"Security","text":"<ul> <li>docker: Install security patches.</li> <li>docker: Use python:3.13-slim-trixie as base.</li> <li>Gufo ACME 0.6.0</li> </ul>"},{"location":"CHANGELOG/#infrastructure","title":"Infrastructure","text":"<ul> <li>Replace black with ruff format</li> <li>ruff 0.11.2</li> <li>mypy 1.13.0</li> <li>Codecov integration.</li> <li>Move dependencies to pyproject.toml</li> </ul>"},{"location":"CHANGELOG/#020-2023-11-23","title":"0.2.0 - 2023-11-23","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>External Account Binding support.</li> </ul>"},{"location":"CHANGELOG/#010-2023-11-20","title":"0.1.0 - 2023-11-20","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright \u00a9 2023-2025, Gufo Labs. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice,    this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</li> <li>Neither the name of Gufo Labs nor the names of its contributors may be used    to endorse or promote products derived from this software without    specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"faq/","title":"FAQ","text":"<p>What is \"Gufo\"?</p> <p>Gufo means the Owl in Italian.</p> <p>Why the owls?</p> <p>We love owls and the viable parts of our technologies were proven at the project, named \"the Owl\".</p> <p>What is \"Gufo Labs\"?</p> <p>Gufo Labs is the Milan-based company specialized on network and IT consulting, and on software research.</p> <p>What is \"Gufo Stack\"?</p> <p>We've extracted core components behind the NOC  and released them as independent packages, available under the terms  of the 3-clause BSD license. Our software shares common code quality standards  and is battle-proven under the high load. We hope our key components will help  the engineers and the developers to build reliable networks and robust network  management software.  See more for details.</p>"},{"location":"dev/","title":"CSR Proxy: Developer's Guide","text":"<p>This section is intended for CSR Proxy developers and for entities,  including both individuals and companies, interested in contributing to the project.</p> <ul> <li>Developer's Environment</li> <li>Building and Testing</li> <li>Common Tasks</li> <li>Code Quality</li> <li>Code Base</li> <li>Contributing Guide</li> <li>Code of Conduct</li> <li>Supported Standards</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/","title":"Gufo Stack Code of Conduct","text":"<p>Gufo Stack are the tools built by people for people. We aim to create a respectful, collaborative, and constructive community where everyone can contribute to building better software.</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-rule","title":"The Rule","text":"<p>\u201cAnd as you wish that others would do to you, do so to them.\u201d</p> <p>-- Luke 6:31</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-note","title":"The Note","text":"<p>This principle is universal. Similar wisdom can be found in many traditions:</p> <ul> <li>Confucius: \u201cDo not impose on others what you do not wish for yourself.\u201d (Analects 15:24)</li> <li>Prophet Muhammad (peace be upon him): \u201cNone of you [truly] believes until he loves for his brother what he loves for himself.\u201d (Hadith, Sahih Muslim 45:71)</li> </ul> <p>That\u2019s all.</p>"},{"location":"dev/CONTRIBUTING/","title":"Types of contributions","text":"<p>You can contribute to the Gufo Labs projects in several way. This repo is a place to discuss and collaborate on GitHub! Our team is maintaining this repo to preserve our bandwidth, off topic conversations will be closed.</p>"},{"location":"dev/CONTRIBUTING/#discussions","title":"Discussions","text":"<p>Discussions are where we have conversations.</p> <p>If you'd like help troubleshooting a PR you're working on, have a great new idea, or want to share something amazing you've learned in our docs, join us in discussions.</p>"},{"location":"dev/CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues are used to track tasks that contributors can help with. </p> <p>If you've found bug, or something in the content of the documentation that should be updated, search open issues to see if someone else has reported the same thing. If it's something new, open an issue. We'll use the issue to have a conversation about the problem you want to fix.</p>"},{"location":"dev/CONTRIBUTING/#pull-requests","title":"Pull requests","text":"<p>A pull request is a way to suggest changes in our repository.</p>"},{"location":"dev/codebase/","title":"Project's Code Base","text":"<p>The code base of the project has following structure:</p> <ul> <li><code>.devcontainer/</code> - Developer's container configuration for    VSCode Remote Containers. Just reopen   project in remote container to get ready-to-development   environment.</li> <li> <p><code>.github/</code> - GitHub settings</p> <ul> <li><code>workflows/</code> - GitHub Actions Workflows settings.   Used to run tests and build the documentation.</li> </ul> </li> <li> <p><code>docs/</code> - Mkdocs documentation.</p> </li> <li><code>src/</code> - Project's source code.</li> <li><code>tests/</code> - Project's Pytest test suite.</li> <li><code>.gitignore</code> - Gitignore file.</li> <li><code>Dockerfile</code> - Dockerfile for development container.</li> <li><code>mkdocs.yml</code> - Mkdocs configuration file.</li> <li><code>pyproject.toml</code> - pyproject.toml file for python tools configuration.</li> </ul>"},{"location":"dev/codequality/","title":"Code Quality Guide","text":"<p>We share the common code quality standards between all Gufo Labs projects.</p>"},{"location":"dev/codequality/#python-code-formatting","title":"Python Code Formatting","text":"<p>All Python code must be formatting using ruff code formatter with settings defined in the project's <code>pyproject.toml</code> file.</p>"},{"location":"dev/codequality/#python-code-linting","title":"Python Code Linting","text":"<p>All Python code must pass ruff tests with the project's settings.</p>"},{"location":"dev/codequality/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>All python code must pass Mypy type checks in the <code>strict</code> mode.</p>"},{"location":"dev/codequality/#test-suite-coverage","title":"Test Suite Coverage","text":"<p>The test suite must provide 100% code coverage whenever possible.</p>"},{"location":"dev/codequality/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Documentation must be clean and mean.</li> </ul>"},{"location":"dev/common/","title":"Developer's Common  Tasks","text":""},{"location":"dev/common/#bump-version","title":"Bump Version","text":"<ul> <li> Change <code>__version__</code> in <code>src/csr_proxy/__init__.py</code></li> <li> Add section in <code>CHANGELOG.md</code></li> </ul>"},{"location":"dev/environment/","title":"Developer's Environment","text":"<p>To participate in development you need to prepare the developer's environment first. Depending on the preferable tools, your mileage may vary.</p>"},{"location":"dev/environment/#visual-studio-code-dev-container","title":"Visual Studio Code Dev Container","text":"<p>The easiest way to start the development is to use Visual Studio Code with Remote Containers plugin. Just click on the green sign in the lower-left corner and select the \"Reopen in Container\" menu item. You'll get all the required formatting and linting settings out of the box.</p>"},{"location":"dev/standards/","title":"Supported Standards","text":"<p>CSR Proxy implements and is guided by the following standards:</p>"},{"location":"dev/standards/#rfc","title":"RFC","text":"<ul> <li>RFC-8555: Automatic Certificate Management Environment (ACME)</li> </ul>"},{"location":"dev/standards/#python-pep","title":"Python PEP","text":"<ul> <li>PEP8: Style Guide for Python Code</li> <li>PEP561: Distributing and Packaging Type Information</li> </ul>"},{"location":"dev/testing/","title":"Building and Testing","text":"<p>Before starting building and testing package set up  Developer's Environment first. From here and below we consider the shell's current directory matches the project's root directory.</p>"},{"location":"dev/testing/#building-package","title":"Building Package","text":"<p>To test the package build run:</p> <pre><code>$ python -m build --sdist --wheel\n</code></pre> <p>Compiled packages will be available in the <code>dist/</code> directory.</p>"},{"location":"dev/testing/#running-tests","title":"Running tests","text":"<p>To run the test suit:</p> <pre><code>$ pytest -vv\n</code></pre>"},{"location":"dev/testing/#running-lints","title":"Running Lints","text":"<p>All lints are checked as part of GitHub Actions Workflow. You may run lints manually before committing to the project.</p>"},{"location":"dev/testing/#check-formatting","title":"Check Formatting","text":"<p>Python Code Formatting is the mandatory requirement in our Code Quality standards. To check code formatting run:</p> <pre><code>$ ruff format --check examples/ src/ tests/\n</code></pre> <p>To fix formatting errors run: <pre><code>$ ruff format examples/ src/ tests/\n</code></pre></p> <p>We recommend setting python code formatting on file saving (Done in VS Code Dev Container out of the box).</p>"},{"location":"dev/testing/#python-code-lints","title":"Python Code Lints","text":"<p>Python Code Linting is the mandatory requirement in our Code Quality standards. To check code for linting errors run:</p> <pre><code>$ ruff examples/ src/ tests/\n</code></pre>"},{"location":"dev/testing/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>Python Code Static Checks is the mandatory requirement in our Code Quality standards. To check code for typing errors run:</p> <pre><code>$ mypy --strict src/\n</code></pre>"},{"location":"dev/testing/#python-test-code-coverage-check","title":"Python Test Code Coverage Check","text":"<p>To evaluate code coverage run tests:</p> <pre><code>$ coverage run -m pytest -vv\n</code></pre> <p>To report the coverage after the test run:</p> <pre><code>$ coverage report\n</code></pre> <p>To show line-by-line coverage:</p> <pre><code>$ coverage html\n</code></pre> <p>Then open <code>dist/coverage/index.html</code> file in your browser.</p>"},{"location":"dev/testing/#building-documentation","title":"Building Documentation","text":"<p>To rebuild and check documentation run</p> <pre><code>$ mkdocs serve\n</code></pre> <p>We recommend using Grammarly service to check documentation for common errors.</p>"},{"location":"installation/","title":"Installation","text":"<p>You have several options to deploy CSR Proxy. Follow the respective guides:</p> <ul> <li>Docker Installation: Install CSR Proxy in a Docker container,     assuming PowerDNS is already up and running.</li> </ul>"},{"location":"installation/docker/","title":"Docker Installation","text":"<p>This installation method assumes that the PowerDNS server is already up and running. Additionally, we assume you have an Nginx server with a publicly exposed address <code>&lt;CSR-IP&gt;</code>, which is running on the same host as the Docker daemon.</p> <p>Let's consider setting up CSR Proxy for signing CSRs for <code>go.example.com</code>. We also assume that our service will respond to the URL <code>https://csr-proxy.example.com/</code>.</p> <p>Before proceeding further, ensure you have:</p> <ul> <li>PowerDNS FQDN</li> <li>PowerDNS API URL</li> <li>PowerDNS API Key</li> </ul>"},{"location":"installation/docker/#dns-setup","title":"DNS Setup","text":"<p>On DNS servers that are master for <code>example.com</code>:</p> <p>Create an <code>A</code> record for <code>csr-proxy.example.com</code>:</p> <pre><code>csr-proxy IN A &lt;CSR-IP&gt;\n</code></pre> <p>Create a glue record to pass domain control to PowerDNS:</p> <pre><code>go IN NS pdns.example.com.\n</code></pre>"},{"location":"installation/docker/#powerdns-setup","title":"PowerDNS Setup","text":"<p>On the PowerDNS server, create a zone:</p> <pre><code>pdnsutil create-zone go.example.com\n</code></pre> <p>And add an A record:</p> <pre><code>pdnsutil add-record go.example.com @ A 127.0.0.1\n</code></pre>"},{"location":"installation/docker/#docker-setup","title":"Docker Setup","text":"<ul> <li>Allocate an unused port for port mapping (later referred to as ) <li>Create a directory to store state (later referred to as ) <li>Create a directory and place the following <code>docker-compose.yml</code>:</li> docker-compose.yml<pre><code>version: \"3\"\nservices:\n  csrp:\n    image: \"gufolabs/csr_proxy:master\"\n    restart: on-failure\n    ports:\n      - 127.0.0.1:&lt;port&gt;:8000\n    volumes:\n      - \"&lt;state path&gt;:/var/lib/csr-proxy/\" \n    logging:\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n    environment:\n      CSR_PROXY_API_HOST: 0.0.0.0\n      CSR_PROXY_SUBJ: \"${CSR_PROXY_SUBJ}\"\n      CSR_PROXY_EMAIL: \"${CSR_PROXY_EMAIL}\"\n      CSR_PROXY_ACME_DIRECTORY: \"${CSR_PROXY_ACME_DIRECTORY}\"\n      CSR_PROXY_PDNS_API_URL: \"${CSR_PROXY_PDNS_API_URL}\"\n      CSR_PROXY_PDNS_API_KEY: \"${CSR_PROXY_ACME_API_KEY}\"\n</code></pre> <p>Create a .env file with our settings:</p> .env<pre><code>CSR_PROXY_SUBJ=CN=go.example.com\nCSR_PROXY_EMAIL=test@example.com\nCSR_PROXY_ACME_DIRECTORY=https://acme-v02.api.letsencrypt.org/directory\nCSR_PROXY_PDNS_API_URL=https://pdns.example.com/\nCSR_PROXY_PDNS_API_KEY=&lt;API KEY&gt;\n</code></pre> <p>Run our service:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"installation/docker/#nginx-setup","title":"Nginx Setup","text":"<p>Add a file <code>/etc/nginx/conf.d/csr-proxy.example.com.conf</code> to your Nginx server.  Note, we're leaving the certificate generation process out of the scope of this guide.</p> /etc/nginx/conf.d/csr-proxy.example.com.conf<pre><code>upstream csrp {\n    server 127.0.0.1:&lt;port&gt;;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name csr-proxy.example.com;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_certificate /etc/nginx/ssl/certificates/csr-proxy.example.com.crt;   \n    ssl_certificate_key /etc/nginx/ssl/certificates/csr-proxy.example.com.key;  \n    add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains\";\n    add_header X-Content-Type-Options nosniff;\n    ssl_stapling off;\n    ssl_stapling_verify off;\n\n    access_log  /var/log/nginx/csr-proxy.example.com.access.log timed_upstream;\n    error_log  /var/log/nginx/csr-proxy.example.com.error.log debug;\n\n    location / {\n        proxy_pass http://csrp_getnoc;\n        proxy_read_timeout 60;\n        proxy_redirect off;\n        proxy_buffering off;\n        gzip on;\n        gzip_types text/html text/css text/x-js application/javascript application/json application/font-woff2;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_hide_header Vary;\n    } \n}\n</code></pre> <p>And apply configuration:</p> <pre><code>service nginx reload\n</code></pre>"},{"location":"installation/docker/#checking","title":"Checking","text":"<p>Create private key:</p> <pre><code>openssl genrsa -out my.key 4096\n</code></pre> <p>Create certificate signing request:</p> <pre><code>openssl req -key my.key -new -out my.csr -subj /CN=go.example.com\n</code></pre> <p>Sign the CSR:</p> <pre><code>curl -X POST -d @my.csr -o my.crt https://csr-proxy.example.com/v1/sign\n</code></pre> <p>Check the <code>my.crt</code> file for the certificate.</p> <pre><code>head my.crt\n-----BEGIN CERTIFICATE-----\nMIIF5jCCBM6gAwIBAgISBForJGaLnlOVGSsH1AjiJxgCMA0GCSqGSIb3DQEBCwUA\nMDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD\n...\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>csr_proxy<ul> <li>api</li> <li>cli</li> <li>config</li> <li>log</li> </ul> </li> </ul>"},{"location":"reference/csr_proxy/","title":"csr_proxy","text":"<p>Simple service to sign the clients' CSR via the ACME server.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <p>Gufo ACME version.</p> <p>The package consists of the following modules:</p> <ul> <li>api - API endpoints.</li> <li>cli - CLI arguments parsing and tools.</li> <li>config - Configuration reading.</li> <li>log - Logging utilities.</li> </ul>"},{"location":"reference/csr_proxy/api/","title":"csr_proxy.api","text":"<p>API endpoint.</p>"},{"location":"reference/csr_proxy/api/#csr_proxy.api.API","title":"<code>API</code>","text":"<p>               Bases: <code>object</code></p> <p>API Enpoint.</p> <p>Accepts the client requests and orchestrates DNS and ACME servers.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Service configuration.</p> required"},{"location":"reference/csr_proxy/api/#csr_proxy.api.API.get_client","title":"<code>get_client()</code>  <code>async</code>","text":"<p>Get PowerDnsAcmeClient instance.</p> <p>Updates state when necessary.</p> <p>Returns:</p> Type Description <code>PowerDnsAcmeClient</code> <p>Configured ACME client.</p>"},{"location":"reference/csr_proxy/api/#csr_proxy.api.API.get_subj","title":"<code>get_subj(csr)</code>  <code>staticmethod</code>","text":"<p>Get subject from CSR.</p> <p>Parameters:</p> Name Type Description Default <code>csr</code> <code>bytes</code> <p>CSR in PEM format.</p> required <p>Returns:</p> Type Description <code>str</code> <p>CSR subject.</p>"},{"location":"reference/csr_proxy/api/#csr_proxy.api.API.run","title":"<code>run(config)</code>  <code>staticmethod</code>","text":"<p>Run service.</p>"},{"location":"reference/csr_proxy/api/#csr_proxy.api.API.sign","title":"<code>sign(request)</code>  <code>async</code>","text":"<p>Sign endpoint.</p> <p>Accepts client's CSR, signs it and returns the signed certificate.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>HTTP request.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>HTTP Response.</p>"},{"location":"reference/csr_proxy/cli/","title":"csr_proxy.cli","text":"<p>Command line parsing and service starting.</p>"},{"location":"reference/csr_proxy/cli/#csr_proxy.cli.Cli","title":"<code>Cli</code>","text":"<p>               Bases: <code>object</code></p> <p>Command-line proceessing.</p>"},{"location":"reference/csr_proxy/cli/#csr_proxy.cli.Cli.handle_version","title":"<code>handle_version()</code>","text":"<p>Process <code>--version</code> flag.</p> <p>Returns:</p> Type Description <code>ExitCode</code> <p>Exit code.</p>"},{"location":"reference/csr_proxy/cli/#csr_proxy.cli.Cli.run","title":"<code>run(args)</code>","text":"<p>Run csr-proxy from arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>List of command-line arguments.</p> required <p>Returns:</p> Type Description <code>ExitCode</code> <p>Exit code</p>"},{"location":"reference/csr_proxy/cli/#csr_proxy.cli.ExitCode","title":"<code>ExitCode</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Cli exit codes.</p> <p>Attributes:</p> Name Type Description <code>OK</code> <p>Successful exit</p>"},{"location":"reference/csr_proxy/cli/#csr_proxy.cli.main","title":"<code>main()</code>","text":"<p>Run <code>csr-proxy</code> with command-line arguments.</p>"},{"location":"reference/csr_proxy/config/","title":"csr_proxy.config","text":"<p>Config class.</p>"},{"location":"reference/csr_proxy/config/#csr_proxy.config.Config","title":"<code>Config</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>The service's configuration.</p> <p>Attributes:</p> Name Type Description <code>trace_format</code> <code>str</code> <p>Traceback format. \"terse\" or \"extend\"</p> <code>api_host</code> <code>str</code> <p>API host to listen.</p> <code>api_port</code> <code>int</code> <p>API port to listen.</p> <code>valid_subj</code> <code>str</code> <p>Certificate subject to pass.</p> <code>state_path</code> <code>Path</code> <p>A path to store ACME client state. Must be readable and writable.</p> <code>email</code> <code>str</code> <p>An email to register on ACME service.</p> <code>acme_directoy</code> <code>str</code> <p>ACME directory URL.</p> <code>pdns_api_url</code> <code>str</code> <p>Root URL of the PowerDNS api.</p> <code>pdns_api_key</code> <code>str</code> <p>API key to authorize on PowerDNS.</p> <code>eab_kid</code> <code>Optional[str]</code> <p>Optional external account binding key id.</p> <code>eab_hmac</code> <code>Optional[str]</code> <p>Optional external account binding HMAC (base64).</p>"},{"location":"reference/csr_proxy/config/#csr_proxy.config.Config.domain","title":"<code>domain</code>  <code>cached</code> <code>property</code>","text":"<p>Get domain name.</p> <p>Returns:</p> Type Description <code>str</code> <p>Domain name.</p>"},{"location":"reference/csr_proxy/config/#csr_proxy.config.Config.default","title":"<code>default()</code>  <code>classmethod</code>","text":"<p>Get default config.</p> <p>Returns:</p> Type Description <code>Config</code> <p>Config instance.</p>"},{"location":"reference/csr_proxy/config/#csr_proxy.config.Config.read","title":"<code>read(prefix='CSR_PROXY_')</code>  <code>classmethod</code>","text":"<p>Read config from environment.</p> <p>Returns:</p> Type Description <code>Config</code> <p>Config instance.</p>"},{"location":"reference/csr_proxy/log/","title":"csr_proxy.log","text":"<p>logging utilities.</p> <p>Attributes:</p> Name Type Description <code>logger</code> <p>Gufo ACME logger.</p>"}]}